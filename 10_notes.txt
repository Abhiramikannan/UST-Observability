14/8/25

1. NOTIFICATION POLICY?

  Notification Policy ‚Äì Think of it like a mailman‚Äôs delivery rule.
    It decides where and to whom the alert should go, and when.
    You can set rules:
          ‚ÄúIf the alert is about database, send it to the DB team.‚Äù
          ‚ÄúIf the alert is about frontend, send it to the web team.‚Äù
          ‚ÄúIf it‚Äôs at night, send it to the on-call person.‚Äù
          Controls the route & timing of the message.

2. LOKI?

      Grafana's owm log system
      Loki = stores logs (text details about what happened, like errors, warnings, events).
      it only stores indexes labels (like app name, pod name, namespace).
      In Grafana ‚Üí Connections ‚Üí Data Sources ‚Üí Add Loki (URL: http://loki:3100).
      Grafana -> explore -> datasource- loki -> querry language of loki type
      Example: {filename="/var/log/tns-app.log"}
              consider an app where u can provide title and url.. provide only title without url..in logs..u can see error

3. ANNOTATIONS?

        Annotations in Grafana are markers or notes you place directly on your graphs to show when something important happened.
        Eg: ‚ÄúOh, that spike happened right when we deployed a new version‚Äù.

        2 types of annotations:
              Manual annotations: You click on the graph and write something (e.g., "Migrated user database").
                                  Or select a time range (region annotation) and describe what happened (e.g., "Load testing").

              Automatic annotations: Grafana can pull events from data sources (like Loki logs) and add them automatically.
                                     Example: Every time the log contains the word "error", an annotation appears on the graph.

4. OPENTELEMETRY?

        Without opentelemetry:
                  collect the metrices,logs,traces using agents.
                  You need different agents/tools for different types of data:
                        Metrics ‚Üí Prometheus agent or Node Exporter
                        Logs ‚Üí Loki agent, Fluentd, or similar
                        Traces ‚Üí Jaeger agent, Zipkin agent
                  Each has its own format, setup, and pipeline.
                  This means more configuration, maintenance, and compatibility headaches.

      with opentelemetry:
                  collect the metrices,logs,traces by itself and sent to grafana,prometheus,jaeger,loki
                  Uses instrumentation libraries (or the OTel Collector) that can gather all three kinds of telemetry data from your app or systems.
                  The OTel Collector can send that data to Grafana, Prometheus, Jaeger, Loki, or any backend that supports the standard.
                  dont need diff agent for diff things(traces,logs,metrices)

5. TESTDATA - DATASOURCE?

            Its a datasource only used to create dummy data means fake data inside grafana
            It does not collect any real data(metrices/logs) from the system.
            Just for practicing and study - it creates a dummy data for you.

6. NOTIFICATION TEMPLATE? ‚Äì Think of it like a message format.
                     
              It decides how your alert looks when it‚Äôs sent.
       Example:

Without a template:
Alert: High CPU
With a template:

              üö® High CPU usage detected!
              Server: {{ $labels.instance }}
              Current value: {{ $value }}%
              Time: {{ $labels.time }}

In Grafana, you can add variables (like $labels.instance) so the alert automatically includes details.

notification template : automatically fetch the instance name, cpu % like that... means current value.. if it change automatically fetches the new value.we should only provide labels.
