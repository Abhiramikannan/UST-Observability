1. CNCF:
    The Cloud Native Computing Foundation (CNCF) is part of the Linux Foundation and supports cloud native computing. 
    It helps developers build and run applications using containers and microservices.
    CNCF hosts popular open-source projects like Kubernetes, Prometheus, and Envoy, bringing together developers and companies to collaborate.

WHY DO WE NEED OPENTELEMETRY
-------------------------------------------
2. Observability: 
      Knowing internal parts of system using external outputs.

3. example of observability become crucial:
        diff computers working together to perform tasks as if they were a single system.
        These systems are widely used in applications like cloud computing, where different parts of an application run on different servers to share resources and balance the workload.
        Because of the complexity of distributed systems, it can be challenging to understand what's happening inside each component at any given time. 
        This is where observability becomes crucial.

To understand a distributed system, we model it using three parts:

    Workload: The tasks or transactions the system performs.
    Software structure: Components like load balancers, services, pods, and containers.
    Physical machines: Hardware resources such as CPU, memory, storage, and network.

Workload & Resource Analysis

    Developers focus on workloads (apps and requests).
    Operations teams focus on resources (hardware and performance).
    To fully understand the system, combine both views.
    Use logs, metrics, and traces to capture and analyze system behavior.


4. logs:
    A record of events that happen in a system.
    Log entry: Has a timestamp (when it happened) and a message (what happened).
    No single standard format — logs differ between software (e.g., web server vs. kernel).

5. Metrices:
    Metrics give a high-level view of system performance and health.
    Metrics help us track changes over time using graphs and dashboards.
    Four common types of metrics:
                Counters – Keep increasing (e.g., number of requests).
                Gauges – Go up or down (e.g., CPU or memory usage).
                Histograms – Measure distributions (e.g., request durations).
                Summaries – Show calculated stats like averages or percentiles.

6. Traces:
        Distributed System Architecture 
        
        As systems became larger and more complex, traditional logs were not enough to debug problems.
        In a distributed system, it’s hard to trace how one request moves through many services.
        On a single machine, we can use stack traces to find errors, but this doesn’t work across multiple systems.
        Debugging often required manual work (like matching timestamps) or deep system knowledge.
        To solve this, Google created Dapper, introducing distributed tracing — a method to track a request’s path across all services in a system.

7. 3 pillars of observability?
        metrices
        logs
        traces

8. Telemetry:
        collecting and transmitting data from remote or distributed systems to monitor, track performance of those systems.
        When we collect telemetry data (logs, metrics, and traces), we don’t just collect it — we also need to analyze it to find useful insights
        analyzation - depends on type of telemetry data

9. Vertical Integration?
        The telemetry data (logs,metrices, traces) can be handled differetly.
        logs = search text(find errors contains "timeout")
        metrics= analyse trends over time(e.g., average CPU use in the past 24 hours).
        Traces → You want to visualize a request flow (e.g., see how long each part of a user request took).
        So they need diff data storage, optimization methods, Querry tools.
    one tool that does the full job for a specific kind of telemetry.This is called Vertical Integration.
    Vendors (like Datadog, New Relic, or Grafana) often focus on one type of data at a time.

10.What does “siloed telemetry” mean?
        telemetry = collect data to understand how system behaves.
        siloed = each type of data (logs, metrics, traces) is separate, stored in different tools, and not connected.
    eg: metrices in prometheous, Logs in elasticsearch , traces in jaeger wont talk to eachother automatically.

    This cause an problem:
        when somethg is happening wrong
            u see metric alert - high latency. You search for related metrices maybe cpu, memory. Also move to logging system to find logs.
            logs don’t have trace IDs or context, so you can’t easily tell which logs are linked to the metric spike.
            You can see th whole story of what happened.
Issue:
    lack of corelation.  Hard to link data across systems.
    miss shared metadata (like trace_id or span_id) that would allow you to connect related events.
    This creates fragmented views — you see bits and pieces, but not the full picture of what the system did.
    OpenTelemetry was created to fix this fragmentation.

11. How Opentele helps to fix this fragmentation of telemetric data as compared from traditional approach?
            OpenTelemetry solves this by standardizing how telemetry is collected and by adding shared context (trace IDs, span IDs) so logs, metrics, and
            traces are connected.
            This gives a complete, end-to-end view of system behavior, making debugging faster and easier.


12. Telemtry data suffers from?
         telemetry data often suffers from a lack of consistency.
         OpenTelemetry fixes this by providing a common, standardized instrumentation framework for consistent, high-quality telemetry data.

13. No Built-in Instrumentation in Open Source Software:
            Most apps use open source libraries, but these don’t have built-in telemetry.
            There’s no standard way to collect data from them, and adding vendor tools causes extra work and lock-in.
            Some projects offer hooks so users can connect their own tools, but that’s hard to maintain and often messy.
            OpenTelemetry fixes this by giving all software a common, easy way to add and share telemetry data.


14. what is hook?
        Hooks = built-in connection points in software that let you attach your own code or tools — like OpenTelemetry — without changing the main program itself.

15. Combining Telemetry Generation with Results in Vendor Lock-In :

            When apps use a specific vendor’s telemetry libraries, all the monitoring code becomes tied to that tool.
            If you later want to switch to another observability system, you’d have to remove and rewrite all that code — a big and costly job.
            This makes it hard to move away from one vendor, causing vendor lock-in.
            OpenTelemetry prevents this by offering standard, vendor-neutral instrumentation that works with any observability platform.


16. Struggling Observability Vendors / High Barrier for Entry:

        Software changes fast and is very different everywhere.
        Making instruments for every library and tool is expensive and hard.
        Vendors focus on converting data instead of making better analysis tools.
        This can lower data quality and make troubleshooting harder.
        OpenTelemetry helps by providing a standard, vendor-neutral format, reducing the need for constant custom instrumentation and improving overall data quality.

17. OpenTelemetry (OTel) – In a Nutshell:
        OpenTelemetry is an open-source framework that helps developers collect and send telemetry data — including traces, metrics, and logs — from their applications.
    key goals:
        Unified telemetry – Combines logs, metrics, and traces so data can be correlated easily.
    `   Vendor-neutral – Works with any observability tool or backend.
        Cross-platform – Supports many languages (Java, Python, Go, etc.) and environments.

18. what Opentele is not:
        Not an All-in-One Monitoring or Observability Tool
                dont replace observability platforms like Datadog, New Relic, or Prometheus.It only collects telemteric data.
        Not a Data Storage or Dashboarding Solution
                    export telemetric data to external systems that handle storage and presentation.
        Not a Pre-configured Monitoring Tool
        Not a Performance Optimizer
                it doesn’t automatically optimize application performance

19.
