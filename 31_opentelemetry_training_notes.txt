1. CNCF:
    The Cloud Native Computing Foundation (CNCF) is part of the Linux Foundation and supports cloud native computing. 
    It helps developers build and run applications using containers and microservices.
    CNCF hosts popular open-source projects like Kubernetes, Prometheus, and Envoy, bringing together developers and companies to collaborate.

WHY DO WE NEED OPENTELEMETRY
-------------------------------------------
2. Observability: 
      Knowing internal parts of system using external outputs.

3. example of observability become crucial:
        diff computers working together to perform tasks as if they were a single system.
        These systems are widely used in applications like cloud computing, where different parts of an application run on different servers to share resources and balance the workload.
        Because of the complexity of distributed systems, it can be challenging to understand what's happening inside each component at any given time. 
        This is where observability becomes crucial.

To understand a distributed system, we model it using three parts:

    Workload: The tasks or transactions the system performs.
    Software structure: Components like load balancers, services, pods, and containers.
    Physical machines: Hardware resources such as CPU, memory, storage, and network.

Workload & Resource Analysis

    Developers focus on workloads (apps and requests).
    Operations teams focus on resources (hardware and performance).
    To fully understand the system, combine both views.
    Use logs, metrics, and traces to capture and analyze system behavior.


4. logs:
    A record of events that happen in a system.
    Log entry: Has a timestamp (when it happened) and a message (what happened).
    No single standard format — logs differ between software (e.g., web server vs. kernel).

5. Metrices:
    Metrics give a high-level view of system performance and health.
    Metrics help us track changes over time using graphs and dashboards.
    Four common types of metrics:
                Counters – Keep increasing (e.g., number of requests).
                Gauges – Go up or down (e.g., CPU or memory usage).
                Histograms – Measure distributions (e.g., request durations).
                Summaries – Show calculated stats like averages or percentiles.

6. Traces:
        Distributed System Architecture 
        
        As systems became larger and more complex, traditional logs were not enough to debug problems.
        In a distributed system, it’s hard to trace how one request moves through many services.
        On a single machine, we can use stack traces to find errors, but this doesn’t work across multiple systems.
        Debugging often required manual work (like matching timestamps) or deep system knowledge.
        To solve this, Google created Dapper, introducing distributed tracing — a method to track a request’s path across all services in a system.
